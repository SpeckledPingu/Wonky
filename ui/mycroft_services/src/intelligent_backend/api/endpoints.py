from fastapi import APIRouter, Depends, HTTPException
from burr.core import Application

from intelligent_backend.api import schemas
from intelligent_backend.core.dependencies import (
    get_insight_extraction_app,
    get_policy_extraction_app,
)

router = APIRouter()


@router.post(
    "/extract-insights",
    response_model=schemas.ExtractionWorkflowResponse,
    tags=["Extraction Workflows"]
)
def run_insight_extraction(
        request: schemas.ExtractionWorkflowRequest,
        app: Application = Depends(get_insight_extraction_app)
):
    """
    Triggers the workflow to extract insights from a document.
    """
    inputs = request.model_dump()
    
    try:
        # Run the Burr application until it halts or completes.
        # The `run_id` is automatically generated by Burr.
        final_action, final_state, run_id = app.run(
            halt_after=["save"],
            inputs=inputs
        )
        
        if final_state.get("error_message"):
            raise HTTPException(status_code=404, detail=final_state["error_message"])
        
        return schemas.ExtractionWorkflowResponse(
            run_id=run_id,
            document_id=final_state["document_id"],
            status="completed",
            extracted_items=final_state.get("insights", [])
        )
    except Exception as e:
        # Log the exception for debugging
        print(f"Error during insight extraction workflow: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/extract-policies",
    response_model=schemas.ExtractionWorkflowResponse,
    tags=["Extraction Workflows"]
)
def run_policy_extraction(
        request: schemas.ExtractionWorkflowRequest,
        app: Application = Depends(get_policy_extraction_app)
):
    """
    Triggers the workflow to extract policies from a document.
    """
    inputs = request.model_dump()
    
    try:
        final_action, final_state, run_id = app.run(
            halt_after=["save"],
            inputs=inputs
        )
        
        if final_state.get("error_message"):
            raise HTTPException(status_code=404, detail=final_state["error_message"])
        
        return schemas.ExtractionWorkflowResponse(
            run_id=run_id,
            document_id=final_state["document_id"],
            status="completed",
            extracted_items=final_state.get("policies", [])
        )
    except Exception as e:
        print(f"Error during policy extraction workflow: {e}")
        raise HTTPException(status_code=500, detail=str(e))
